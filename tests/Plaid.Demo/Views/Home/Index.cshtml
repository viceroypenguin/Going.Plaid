@model PlaidCredentials
<div id="plaid-link" class="row">
    <div class="col-xs-12">
        <div id="form">
            <div class="input">
                <label><a>environment:</a></label>
                <span data-bind="text: environment" style="font-weight: 700"></span>
            </div>

            <hr />
 
            <div class="input" style="width: fit-content; margin: auto; text-align: right;">
                @foreach (var product in Enum.GetNames(typeof(Going.Plaid.Entity.Product)))
                {
                    <label class="container">
                        @product
                        <input class="product-box" type="checkbox" data-value="@product" />
                        <span class="checkmark"></span>
                    </label>
                    <br/>
                }
            </div>
            
            <hr />

            <div class="input">
                <label>access_token:</label>
                <input type="text" data-bind="value: accessToken" placeholder="click 'link account' button to get a token" style="width: 250px"/>
            </div>

            <button data-bind="click: showPlaidLink">Link Account</button>
            <button data-bind="click: refreshToken">Refresh Token</button>
        </div>
    </div>
</div>

<div id="plaid-products" class="row">
    <div class="col-xs-12">
    </div>
</div>

@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
    <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
	<script type="text/javascript">
        function ViewModel () {
            var self = this;

            self.environment = ko.observable("@Model.Environment");
            self.linkToken = ko.observable("@Model.LinkToken");
            self.accessToken = ko.observable();

            self.products = function () {
                let transactions = [];
                let elements = document.getElementsByClassName("product-box");
                for (let i = 0; i < elements.length; i++) {
                    if (elements[i].checked) {
                        let value = elements[i].getAttribute("data-value");
                        transactions.push(value);
                    }
                }
                return transactions;
            };

            self.hasAccessToken = ko.observable(function () {
                return self.isNullOrEmpty(this.accessToken);
            }, this);

            self.isNullOrEmpty = function (text) {
                return (!text || text.length === 0);
            }

            self.showPlaidLink = async function () {
				const fetchLinkToken = async () => {
                    const response = await fetch('/home/getlinktoken', {
                        method: 'POST',
                        headers: {
							'Content-Type': 'application/json'
						},
                        body: JSON.stringify(self.products()),
                    });
					const responseJSON = await response.json();
					return responseJSON.linkToken;
				};

				const configs = {
					// Required, fetch a link token from your server and pass it
					// back to your app to initialize Link.
					token: await fetchLinkToken(),
					onLoad: function () {
						// Optional, called when Link loads
					},
                    onSuccess: async function (public_token, metadata) {
                        console.log("public_token: " + public_token);

                        // Send the public_token to your app server.
                        // The metadata object contains info about the institution the
                        // user selected and the account ID, if the Account Select view
                        // is enabled.
                        const response = await fetch("/home/getaccesstoken", {
                            method: 'POST',
							headers: {
								'Content-Type': 'application/json'
							},
                            body: JSON.stringify(public_token)
                        });
						const responseJSON = await response.json();
                        self.accessToken(responseJSON.accessToken);
                    },
                    onExit: function (err, metadata) {
                        // The user exited the Link flow.
                        if (err != null) {
                            // The user encountered a Plaid API error prior to exiting.
                        }
                        // metadata contains information about the institution
                        // that the user selected and the most recent API request IDs.
                        // Storing this information can be helpful for support.
                    },
                    onEvent: function (eventName, metadata) {
                        // Optionally capture Link flow events, streamed through
                        // this callback as your users connect an Item to Plaid.
                        // For example:
                        // eventName = "TRANSITION_VIEW"
                        // metadata  = {
                        //   link_session_id: "123-abc",
                        //   mfa_type:        "questions",
                        //   timestamp:       "2017-09-14T14:42:19.350Z",
                        //   view_name:       "MFA",
                        // }
                    }
                };

                let handler = Plaid.create(configs);
                handler.open();
            };

            self.refreshToken = async function () {
                const response = await fetch('/home/getupdatetoken', {
                    method: 'POST',
                    headers: {
						'Content-Type': 'application/json'
					},
                    body: JSON.stringify(self.accessToken()),
                });
				const responseJSON = await response.json();
                var handler = Plaid.create({
                    token: responseJSON.linkToken,
                    onLoad: function () {
                        // Optional, called when Link loads
                    },
                    onSuccess: function (public_token, metadata) {
                        console.log("success!");
                    },
                    onExit: function (err, metadata) {
                        // The user exited the Link flow.
                        if (err != null) {
                            // The user encountered a Plaid API error prior to exiting.
                        }
                        // metadata contains information about the institution
                        // that the user selected and the most recent API request IDs.
                        // Storing this information can be helpful for support.
                    },
                    onEvent: function (eventName, metadata) {
                        // Optionally capture Link flow events, streamed through
                        // this callback as your users connect an Item to Plaid.
                        // For example:
                        // eventName = "TRANSITION_VIEW"
                        // metadata  = {
                        //   link_session_id: "123-abc",
                        //   mfa_type:        "questions",
                        //   timestamp:       "2017-09-14T14:42:19.350Z",
                        //   view_name:       "MFA",
                        // }
                        }
                    });
                handler.open();
            };
        }

        var vm = null;
        (function () {
            vm = new ViewModel();
            ko.applyBindings(vm);
            document.getElementsByClassName("product-box")[0].checked = true;
        })();
	</script>
}
